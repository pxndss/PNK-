{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BrowserRouter as Router,Routes,Route,useNavigate}from'react-router-dom';// Agregamos useNavigate si lo necesitas en App.js, aunque en LoginPage ya está\nimport'bootstrap/dist/css/bootstrap.min.css';import'./App.css';// Importar componentes de UI (estos no cambian)\nimport NavbarComponent from'./components/NavbarComponent';import HeroSection from'./components/HeroSection';import FeaturedProperties from'./components/FeaturedProperties';import ServicesSection from'./components/ServicesSection';import FooterComponent from'./components/FooterComponent';// Importar los componentes de autenticación\nimport LoginPage from'./components/Login';// <--- ASUME QUE EL COMPONENTE SE LLAMA 'Login.js' y está en 'components'\n// Si lo guardaste como 'LoginPage.js' en la carpeta 'pages', sería:\n// import LoginPage from './pages/LoginPage';\nimport Recovery from'./components/Recovery';// Añade aquí importaciones para otros componentes de rutas futuras (ej. Register, Dashboard, DetalleInmueble)\n// import RegisterPage from './components/RegisterPage'; // Si creas un componente de registro\n// import Dashboard from './components/Dashboard'; // Si creas un componente para el dashboard de usuario\n// import AdminDashboard from './components/AdminDashboard'; // Para el dashboard de admin\n// import GestorDashboard from './components/GestorDashboard'; // Para el dashboard de gestor\n// import PropietarioDashboard from './components/PropietarioDashboard'; // Para el dashboard de propietario\nimport{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[session,setSession]=useState({isLoggedIn:false,userName:'',userType:''});// useNavigate para redirección programática en App.js si fuera necesario\nconst navigate=useNavigate();// Solo si lo usas aquí, si no, puedes quitarlo.\nuseEffect(()=>{// Aquí iría tu lógica para verificar si el usuario ya está logueado\n// Por ejemplo, revisando un token en localStorage al cargar la app\nconst storedUser=localStorage.getItem('user');if(storedUser){const user=JSON.parse(storedUser);setSession({isLoggedIn:true,userName:user.nombre,// Asegúrate de que el nombre de la propiedad sea correcto (ej. 'nombre' o 'name')\nuserType:user.tipo_usuario// Asegúrate de que el nombre de la propiedad sea correcto (ej. 'tipo_usuario' o 'type')\n});}},[]);const handleLoginSuccess=userData=>{// Guarda los datos del usuario en el estado de la sesión\nsetSession({isLoggedIn:true,userName:userData.nombre,// Asegúrate que 'nombre' sea la propiedad correcta de userData\nuserType:userData.tipo_usuario// Asegúrate que 'tipo_usuario' sea la propiedad correcta de userData\n});// Opcional: Guarda también en localStorage para persistencia\nlocalStorage.setItem('user',JSON.stringify(userData));// Redirige al usuario según su tipo después de un login exitoso\nswitch(userData.tipo_usuario){// Asegúrate que 'tipo_usuario' sea la propiedad correcta\ncase'admin':navigate('/admin/dashboard');break;case'gestor':navigate('/gestor/dashboard');break;case'propietario':navigate('/propietario/dashboard');break;default:navigate('/dashboard');// Ruta por defecto para otros tipos de usuarios o si no está definido\n}};const handleLogout=()=>{setSession({isLoggedIn:false,userName:'',userType:''});localStorage.removeItem('user');// Limpia también del localStorage\nnavigate('/login');// Redirige a la página de login\n};return(/*#__PURE__*/// <Router> ya está envolviendo el App en el ejemplo original, no lo repitas si ya lo tienes en index.js\n// Si tu App.js es el archivo principal que se renderiza directamente en index.js, entonces Router debe estar aquí.\n_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(NavbarComponent,{session:session,onLogout:handleLogout}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(HeroSection,{}),/*#__PURE__*/_jsx(FeaturedProperties,{}),/*#__PURE__*/_jsx(ServicesSection,{})]})}),/*#__PURE__*/_jsx(Route,{path:\"/login\",element:/*#__PURE__*/_jsx(LoginPage,{onLoginSuccess:handleLoginSuccess})}),/*#__PURE__*/_jsx(Route,{path:\"/recuperar\",element:/*#__PURE__*/_jsx(Recovery,{})}),/*#__PURE__*/_jsx(Route,{path:\"/admin/dashboard\",element:/*#__PURE__*/_jsx(AdminDashboard,{})}),\" \",/*#__PURE__*/_jsx(Route,{path:\"/gestor/dashboard\",element:/*#__PURE__*/_jsx(GestorDashboard,{})}),\" \",/*#__PURE__*/_jsx(Route,{path:\"/propietario/dashboard\",element:/*#__PURE__*/_jsx(PropietarioDashboard,{})}),\" \",/*#__PURE__*/_jsx(Route,{path:\"/dashboard\",element:/*#__PURE__*/_jsx(Dashboard,{})}),\" \"]}),/*#__PURE__*/_jsx(FooterComponent,{session:session})]}));}export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","useNavigate","NavbarComponent","HeroSection","FeaturedProperties","ServicesSection","FooterComponent","LoginPage","Recovery","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","session","setSession","isLoggedIn","userName","userType","navigate","storedUser","localStorage","getItem","user","JSON","parse","nombre","tipo_usuario","handleLoginSuccess","userData","setItem","stringify","handleLogout","removeItem","className","children","onLogout","path","element","onLoginSuccess","AdminDashboard","GestorDashboard","PropietarioDashboard","Dashboard"],"sources":["C:/xampp/php/www/pnk-react/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom'; // Agregamos useNavigate si lo necesitas en App.js, aunque en LoginPage ya está\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// Importar componentes de UI (estos no cambian)\nimport NavbarComponent from './components/NavbarComponent';\nimport HeroSection from './components/HeroSection';\nimport FeaturedProperties from './components/FeaturedProperties';\nimport ServicesSection from './components/ServicesSection';\nimport FooterComponent from './components/FooterComponent';\n\n// Importar los componentes de autenticación\nimport LoginPage from './components/Login'; // <--- ASUME QUE EL COMPONENTE SE LLAMA 'Login.js' y está en 'components'\n// Si lo guardaste como 'LoginPage.js' en la carpeta 'pages', sería:\n// import LoginPage from './pages/LoginPage';\nimport Recovery from './components/Recovery';\n// Añade aquí importaciones para otros componentes de rutas futuras (ej. Register, Dashboard, DetalleInmueble)\n// import RegisterPage from './components/RegisterPage'; // Si creas un componente de registro\n// import Dashboard from './components/Dashboard'; // Si creas un componente para el dashboard de usuario\n// import AdminDashboard from './components/AdminDashboard'; // Para el dashboard de admin\n// import GestorDashboard from './components/GestorDashboard'; // Para el dashboard de gestor\n// import PropietarioDashboard from './components/PropietarioDashboard'; // Para el dashboard de propietario\n\n\nfunction App() {\n  const [session, setSession] = useState({\n    isLoggedIn: false,\n    userName: '',\n    userType: ''\n  });\n\n  // useNavigate para redirección programática en App.js si fuera necesario\n  const navigate = useNavigate(); // Solo si lo usas aquí, si no, puedes quitarlo.\n\n  useEffect(() => {\n    // Aquí iría tu lógica para verificar si el usuario ya está logueado\n    // Por ejemplo, revisando un token en localStorage al cargar la app\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setSession({\n        isLoggedIn: true,\n        userName: user.nombre, // Asegúrate de que el nombre de la propiedad sea correcto (ej. 'nombre' o 'name')\n        userType: user.tipo_usuario // Asegúrate de que el nombre de la propiedad sea correcto (ej. 'tipo_usuario' o 'type')\n      });\n    }\n  }, []);\n\n  const handleLoginSuccess = (userData) => {\n    // Guarda los datos del usuario en el estado de la sesión\n    setSession({\n      isLoggedIn: true,\n      userName: userData.nombre, // Asegúrate que 'nombre' sea la propiedad correcta de userData\n      userType: userData.tipo_usuario // Asegúrate que 'tipo_usuario' sea la propiedad correcta de userData\n    });\n    // Opcional: Guarda también en localStorage para persistencia\n    localStorage.setItem('user', JSON.stringify(userData));\n\n    // Redirige al usuario según su tipo después de un login exitoso\n    switch (userData.tipo_usuario) { // Asegúrate que 'tipo_usuario' sea la propiedad correcta\n        case 'admin':\n            navigate('/admin/dashboard');\n            break;\n        case 'gestor':\n            navigate('/gestor/dashboard');\n            break;\n        case 'propietario':\n            navigate('/propietario/dashboard');\n            break;\n        default:\n            navigate('/dashboard'); // Ruta por defecto para otros tipos de usuarios o si no está definido\n    }\n  };\n\n  const handleLogout = () => {\n    setSession({ isLoggedIn: false, userName: '', userType: '' });\n    localStorage.removeItem('user'); // Limpia también del localStorage\n    navigate('/login'); // Redirige a la página de login\n  };\n\n  return (\n    // <Router> ya está envolviendo el App en el ejemplo original, no lo repitas si ya lo tienes en index.js\n    // Si tu App.js es el archivo principal que se renderiza directamente en index.js, entonces Router debe estar aquí.\n    <div className=\"App\">\n      <NavbarComponent session={session} onLogout={handleLogout} />\n      <Routes>\n        <Route path=\"/\" element={\n          <>\n            <HeroSection />\n            <FeaturedProperties />\n            <ServicesSection />\n          </>\n        } />\n        {/* Aquí pasamos la función handleLoginSuccess al componente LoginPage */}\n        <Route path=\"/login\" element={<LoginPage onLoginSuccess={handleLoginSuccess} />} />\n        <Route path=\"/recuperar\" element={<Recovery />} />\n\n        {/* Añade las rutas para los dashboards de usuarios que se mencionaron */}\n        <Route path=\"/admin/dashboard\" element={<AdminDashboard />} /> {/* Asegúrate de importar AdminDashboard */}\n        <Route path=\"/gestor/dashboard\" element={<GestorDashboard />} /> {/* Asegúrate de importar GestorDashboard */}\n        <Route path=\"/propietario/dashboard\" element={<PropietarioDashboard />} /> {/* Asegúrate de importar PropietarioDashboard */}\n        <Route path=\"/dashboard\" element={<Dashboard />} /> {/* Para el dashboard general o de propietario si es el mismo */}\n\n        {/* Añade más rutas aquí según tus necesidades (ej. registro, detalle de propiedades) */}\n        {/* <Route path=\"/buscar_inmuebles\" element={<BuscarInmuebles />} /> */}\n        {/* <Route path=\"/publicar_inmueble\" element={<PublicarInmueble />} /> */}\n        {/* <Route path=\"/registrarme\" element={<RegisterPage />} /> */}\n        {/* <Route path=\"/detalle_inmuebles/:id\" element={<DetalleInmuebles />} /> */}\n      </Routes>\n      <FooterComponent session={session} />\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}